---
title: "Mande valency"
format:
  html:
    embed-resources: true
    output-file: index.html
df-print: kable
editor: source
code-fold: true
editor_options: 
  chunk_output_type: console
---

```{r}
#| include=FALSE
# setwd("/home/agricolamz/work/articles/2023_Mande_Say_Khachaturyan_Konoshenko/repo")
knitr::opts_chunk$set(message = FALSE, warning = FALSE, fig.width = 10, fig.height = 7)
library(tidyverse)
library(widyr)
library(phangorn)
theme_set(theme_bw()+theme(text = element_text(size = 16)))
readxl::read_xlsx("../GM_merged_wide.xlsx") %>% 
  filter(!(number %in% c(112, 128, 122, 125, 114))) %>% 
  rename(construction_type = extended_construction) ->
  df_wide
read_csv("../GM_merged.csv") %>% 
  filter(!str_detect(construction, "no equivalent"),
         !is.na(extended_construction),
         !(number %in% c(112, 128, 122, 125, 114))) %>% 
  rename(construction_type = extended_construction) ->
  df
readxl::read_xlsx("../say_stimuli.xlsx", sheet = "stimuli_general") %>% 
  select(Number, `English predicate`, `Stimulus sentence (SAY)`, `Semantic types`) %>% 
  rename(number = Number,
         predicate_eng = `English predicate`,
         stimuli = `Stimulus sentence (SAY)`,
         semantic_type = `Semantic types`) ->
  stimuli
df %>% 
  count(number, language) %>% 
  count(number) %>%
  filter(n == 6) %>% 
  pull(number) ->
  to_keep

colors <- tibble(language = c("Guro", "Dan Gweetaa", "Dan_Gweetaa", "Mano", 
                    "Kpelle", "Kono", "Looma"),
       color = c("gold1", "gold3", "gold3","gold3", "cyan3", "cyan3", "cyan1"))
```

::: {.panel-tabset}

## Конструкции главное

Здесь одно и то же расстояние по хитмэпу, кластеризации:

::: {.panel-tabset}

### heatmap

```{r heatmap-golden-stadard}
df %>% 
  filter(number %in% to_keep,
         !str_detect(construction, "no equivalent"),
         !is.na(construction_type)) %>% 
  arrange(language)  %>% 
  distinct(language, number, construction_type)  %>% 
  pairwise_count(language, number) %>% 
  rename(total = n) ->
  df_pairwise_total

df %>% 
  filter(number %in% to_keep,
         !str_detect(construction, "no equivalent"),
         !is.na(construction_type)) %>% 
  group_by(number) %>% 
  arrange(language) %>% 
  pairwise_count(language, construction_type)  %>% 
  mutate(n = 1) %>% 
  group_by(item1, item2) %>% 
  summarise(n = sum(n)) -> 
  df_pairwise_within_construction

df_pairwise_total %>% 
  left_join(df_pairwise_within_construction) %>%  
  mutate(percentage = round(n/total*100, 2),
         item1 = case_match(item1, 
                            "Dan_Gweetaa" ~ "Dan Gweetaa",
                            .default = item1),
         item2 = case_match(item2, 
                            "Dan_Gweetaa" ~ "Dan Gweetaa",
                            .default = item2)) %>% 
  select(item1, item2, percentage) %>% 
  mutate(item1 = factor(item1, levels = c("Guro", "Dan Gweetaa", "Mano", "Kpelle", "Kono", "Looma")),
         item2 = factor(item2, levels = c("Guro", "Dan Gweetaa", "Mano", "Kpelle", "Kono", "Looma"))) %>% 
  ggplot(aes(item1, item2))+
  geom_tile(aes(fill = percentage), colour = "white") +
  geom_text(aes(label = str_c(percentage, "%")), colour = "white") +
  scale_fill_gradient(low = "lightblue", high = "navy")+
  coord_fixed()+
  labs(x = "", y = "", title = "Heatmap for all stimuli") +
  theme(legend.position = "bottom")
```

### hclust

```{r hclust-golden-stadard}
df_pairwise_total %>% 
  left_join(df_pairwise_within_construction) %>%  
  mutate(percentage = 100-round(n/total*100, 2),
         item1 = case_match(item1, 
                            "Dan_Gweetaa" ~ "Dan Gweetaa",
                            .default = item1),
         item2 = case_match(item2, 
                            "Dan_Gweetaa" ~ "Dan Gweetaa",
                            .default = item2)) %>% 
  select(item1, item2, percentage) %>% 
  pivot_wider(names_from = item2, values_from = percentage) %>% 
  arrange(item1) %>% 
  select(-item1) %>% 
  as.dist() ->
  dist_gold_standard

library("ape")
dist_gold_standard %>%   
  hclust() %>% 
  as.phylo() %>% 
  plot(main = "Clusterization for all stimuli",
       tip.color = colors$color[match(.$tip.label, colors$language)],
       direction = "downwards",
       cex = 1.5,
       font = 2)
```

### neighbornet

```{r nn-golden-stadard}
dist_gold_standard %>% 
  neighborNet() %>% 
  plot()
title(main = "Heatmap for all stimuli")
```

:::

## Конструкции

Я вынул из таблицы данные по дан, гуро, коно, кпелле, лоома, мано и сделал столбцы

- `number`
- `cunstruction`
- `exteded_cunstruction`
- `postposition`
- `language`

Есть случаи, когда конструкция (`cunstruction`) есть, а расшириной конструкции (`exteded_cunstruction`) нет:

```{r}
df %>% 
  filter(!str_detect(construction, "no equivalent"),
         is.na(construction_type))
```

Видимо, все эти примеры надо поправить. Сколько у нас наблюдений по каждому языку?

```{r}
df %>% 
  filter(!str_detect(construction, "no equivalent"),
         !is.na(construction_type)) %>% 
  count(language)
```


А пока давайте посмотрим на общую таблицу:

```{r}
df_wide <- readxl::read_xlsx("../GM_merged_wide.xlsx")
```

Можно посчитать, сколько раз пары языков заполняют один и тот же стимул:

```{r}
df %>% 
  filter(!str_detect(construction, "no equivalent"),
         !is.na(construction_type)) %>% 
  arrange(language) %>% 
  distinct(language, number) %>% 
  pairwise_count(language, number) %>% 
  rename(total = n) ->
  df_pairwise_total

df_pairwise_total %>% 
  pivot_wider(names_from = item2, values_from = total) %>% 
  arrange(item1)
```

Можно посчитать, сколько раз пары языков заполняют одну и ту же конструкцию (т. е. совпадают в конструкции, в одном и том же стимуле):

```{r}
df %>% 
  filter(!str_detect(construction, "no equivalent"),
         !is.na(construction_type)) %>% 
  group_by(number) %>% 
  arrange(language) %>% 
  pairwise_count(language, construction_type) %>% 
  mutate(n = 1) %>% # to unify
  group_by(item1, item2) %>% 
  summarise(n = sum(n)) ->
  df_pairwise_within_construction

df_pairwise_within_construction %>%
  pivot_wider(names_from = item2, values_from = n) %>% 
  arrange(item1) %>% 
  select(item1, Dan_Gweetaa, Guro, Kono, Kpelle, Looma, Mano) 
```

Мне кажется, что чтобы посчитать процент совпадений, о котором просила Маша, нужно разделить последнюю таблицу на предпоследнюю:

```{r}
df_pairwise_total %>% 
  left_join(df_pairwise_within_construction) %>% 
  mutate(percentage = round(n/total*100, 3)) %>% 
  select(item1, item2, percentage) %>% 
  pivot_wider(names_from = item2, values_from = percentage) %>% 
  arrange(item1) %>% 
  select(item1, Dan_Gweetaa, Guro, Kono, Kpelle, Looma, Mano)
```

Можно построить тепловую карту:

```{r heatmap}
df_pairwise_total %>% 
  left_join(df_pairwise_within_construction) %>% 
  mutate(percentage = round(n/total*100, 2),
         item1 = case_match(item1, 
                            "Dan_Gweetaa" ~ "Dan Gweetaa",
                            .default = item1),
         item2 = case_match(item2, 
                            "Dan_Gweetaa" ~ "Dan Gweetaa",
                            .default = item2)) %>% 
  select(item1, item2, percentage) %>% 
  ggplot(aes(item1, item2))+
  geom_tile(aes(fill = percentage), colour = "white") +
  geom_text(aes(label = str_c(percentage, "%")), colour = "white") +
  scale_fill_gradient(low = "lightblue", high = "navy")+
  coord_fixed()+
  labs(x = "", y = "") +
  theme(legend.position = "bottom")
```

Теперь можем провести быструю кластеризацию:

::: {.panel-tabset}

### hclust

```{r all-stimuli}
df_wide %>% 
  mutate(across(Guro:Kpelle, function(x){ifelse(is.na(x), 0, 1)})) %>% 
  select(Guro:Kpelle) %>% 
  t() %>% 
  dist(method = "binary")  ->
  all_stimuli

all_stimuli %>% 
  hclust() %>% 
  as.phylo() %>% 
  plot(main = "Все примеры, без фильтрации",
       tip.color = colors$color[match(.$tip.label, colors$language)],
       direction = "downwards",
       cex = 1.5,
       font = 2)
```

### neighbornet

```{r all-stimuli-nn}
all_stimuli %>% 
  neighborNet() %>% 
  plot()
title(main = "Все примеры, без фильтрации")
```

:::

Можно еще посмотреть на кластеризацию конструкций, но это не поместиться на экран. Однако я считаю, что это было бы интересно Сереже.

Вот что будет, если взять только первые строки для каждого языка:

::: {.panel-tabset}

### hclust

```{r sample-first-construction}
df %>% 
  filter(!str_detect(construction, "no equivalent"),
         !is.na(construction_type)) %>%
  group_by(number, language) %>% 
  slice(1)  %>% 
  ungroup() %>% 
  select(number, language, construction_type) %>% 
  mutate(construction_type2 = 1) %>% 
  pivot_wider(names_from = language, values_from = construction_type2, values_fill = 0) %>% 
  select(Dan_Gweetaa:Mano)  %>% 
  t() %>% 
  dist(method = "binary")  ->
  sample_first_construction

sample_first_construction %>% 
  hclust() %>% 
  as.phylo() %>% 
  plot(main = "Выборка с первыми строками для каждого языка",
       tip.color = colors$color[match(.$tip.label, colors$language)],
       direction = "downwards",
       cex = 1.5,
       font = 2)
```

### neighbornet

```{r sample-first-construction-nn}
sample_first_construction %>% 
  neighborNet() %>% 
  plot()
title(main = "Выборка с первыми строками для каждого языка")
```

:::

> МХ: А что будет, если выбрать случайный эквивалент, а не первую строку?

Вот что будет, если взять случайный эквивалент для каждого языка `set.seed(42)` (такие же 3, 5, 7, 12, 13, 15; похож на 4, 8, 11):

::: {.panel-tabset}

### hclust

```{r sample-random-construction}
set.seed(42)
df %>% 
  filter(!str_detect(construction, "no equivalent"),
         !is.na(construction_type)) %>%
  group_by(number, language) %>% 
  slice_sample(n = 1) %>% 
  ungroup() %>% 
  select(number, language, construction_type) %>% 
  mutate(construction_type2 = 1) %>% 
  pivot_wider(names_from = language, values_from = construction_type2, values_fill = 0) %>% 
  select(Dan_Gweetaa:Mano)  %>% 
  t() %>% 
  dist(method = "binary")  ->
  sample_random_construction

sample_random_construction %>% 
  hclust() %>% 
  as.phylo() %>% 
  plot(main = "Clusterization with random equivalents",
       tip.color = colors$color[match(.$tip.label, colors$language)],
       direction = "downwards",
       cex = 1.5, 
       font = 2)
```

### neighbornet

```{r sample-random-construction-nn}
sample_random_construction %>% 
  neighborNet() %>% 
  plot()
title(main = "Выборка со случайным эквивалентом для каждого языка")
```

:::

Вот что будет, если взять случайный эквивалент для каждого языка `set.seed(57)` (такие же 1, 2, 6, 9, 10, 14):

::: {.panel-tabset}

### hclust

```{r sample-random-construction2}
set.seed(57)
df %>% 
  filter(!str_detect(construction, "no equivalent"),
         !is.na(construction_type)) %>%
  group_by(number, language) %>% 
  slice_sample(n = 1) %>% 
  ungroup() %>% 
  select(number, language, construction_type) %>% 
  mutate(construction_type2 = 1) %>% 
  pivot_wider(names_from = language, values_from = construction_type2, values_fill = 0) %>% 
  select(Dan_Gweetaa:Mano)  %>% 
  t() %>% 
  dist(method = "binary")  ->
  sample_random_construction

sample_random_construction %>% 
  hclust() %>% 
  as.phylo() %>% 
  plot(main = "Clusterization with random equivalents",
       tip.color = colors$color[match(.$tip.label, colors$language)],
       direction = "downwards",
       cex = 1.5, 
       font = 2)
```

### neighbornet

```{r sample-random-construction-nn2}
sample_random_construction %>% 
  neighborNet() %>% 
  plot()
title(main = "Выборка со случайным эквивалентом для каждого языка")
```

:::

Вот что будет, если взять только популярные конструкции:

::: {.panel-tabset}

### hclust

```{r sample-popular-construction}
df_wide %>% 
  group_by(number) %>% 
  filter(n == max(n))  %>% 
  ungroup() %>% 
  mutate(across(Guro:Kpelle, function(x){ifelse(is.na(x), 0, 1)})) %>% 
  select(Guro:Kpelle) %>% 
  t() %>% 
  dist(method = "binary")  ->
  sample_popular_construction

sample_popular_construction %>% 
  hclust() %>% 
  as.phylo() %>% 
  plot(main = "Выборка с популярынми конструкциями",
       tip.color = colors$color[match(.$tip.label, colors$language)],
       direction = "downwards",
       cex = 1.5, 
       font = 2)
```

### neighbornet

```{r sample-popular-construction-nn}
sample_popular_construction  %>% 
  neighborNet() %>% 
  plot()
title(main = "Выборка с популярынми конструкциями")
```

:::

> МХ: я также думаю что можно попробовать проанализировать только те стимулы где у ВСЕХ языков есть эквиваленты

Вот список стимулов, для которых есть все шесть языков:

```{r}
df %>% 
  count(number, language) %>% 
  count(number) %>%
  filter(n == 6) %>% 
  pull(number) ->
  to_keep
to_keep
```

Или наоборот, вот номера, для которых не во всех языках есть данные:

```{r}
df %>% 
  count(number, language) %>% 
  count(number) %>% 
  filter(n < 6) %>% 
  pull(number)
```

Запустим кластеризацию:

::: {.panel-tabset}

### hclust

```{r stimuli-sample-all-langs}
df_wide %>% 
  filter(number %in% to_keep) %>%  
  mutate(across(Guro:Kpelle, function(x){ifelse(is.na(x), 0, 1)}))  %>% 
  select(Guro:Kpelle) %>% 
  t() %>% 
  dist(method = "binary") ->
  stimuli_sample_all_langs

stimuli_sample_all_langs %>% 
  hclust() %>% 
  as.phylo() %>% 
  plot(main = "Clusterization with common stimuli",
       tip.color = colors$color[match(.$tip.label, colors$language)],
       direction = "downwards",
       cex = 1.5, 
       font = 2)
```

### neighbornet

```{r stimuli-sample-all-langs-nn}
stimuli_sample_all_langs  %>% 
  neighborNet() %>% 
  plot()
title(main = "Выборка стимулов со всеми 6 языками")
```

### heatmap

```{r stimuli-sample-all-langs-heatmap}
df %>% 
  filter(number %in% to_keep,
         !str_detect(construction, "no equivalent"),
         !is.na(construction_type)) %>% 
  arrange(language)  %>% 
  distinct(language, number, construction_type)  %>% 
  pairwise_count(language, number) %>% 
  rename(total = n) ->
  df_pairwise_total

df %>% 
  filter(number %in% to_keep,
         !str_detect(construction, "no equivalent"),
         !is.na(construction_type)) %>% 
  group_by(number) %>% 
  arrange(language) %>% 
  pairwise_count(language, construction_type)  %>% 
  mutate(n = 1) %>% 
  group_by(item1, item2) %>% 
  summarise(n = sum(n)) -> 
  df_pairwise_within_construction

df_pairwise_total %>% 
  left_join(df_pairwise_within_construction) %>%  
  mutate(percentage = round(n/total*100, 2),
         item1 = case_match(item1, 
                            "Dan_Gweetaa" ~ "Dan Gweetaa",
                            .default = item1),
         item2 = case_match(item2, 
                            "Dan_Gweetaa" ~ "Dan Gweetaa",
                            .default = item2)) %>% 
  select(item1, item2, percentage) %>% 
  ggplot(aes(item1, item2))+
  geom_tile(aes(fill = percentage), colour = "white") +
  geom_text(aes(label = str_c(percentage, "%")), colour = "white") +
  scale_fill_gradient(low = "lightblue", high = "navy")+
  coord_fixed()+
  labs(x = "", y = "", title = "Выборка стимулов со всеми 6 языками") +
  theme(legend.position = "bottom")
```

:::


> Интересно, что выборка со случайным эквивалентом и выборка только тех стимулов, где есть данные по всем шести языкам, дает такие разные результаты. Что будет если взять выборку данных по всем языкам и В НЕЙ провести случайную выборку эквивалентной конструкции?


::: {.panel-tabset}

### hclust

```{r stimuli-sample-all-langs-and-random}
df %>% 
  filter(!str_detect(construction, "no equivalent"),
         !is.na(construction_type),
         number %in% to_keep) %>%
  group_by(number, language) %>% 
  slice_sample(n = 1) %>% 
  ungroup() %>% 
  select(number, language, construction_type) %>% 
  mutate(construction_type2 = 1) %>% 
  pivot_wider(names_from = language, values_from = construction_type2, values_fill = 0) %>% 
  select(Dan_Gweetaa:Mano)  %>% 
  t() %>% 
  dist(method = "binary") ->
  stimuli_sample_all_langs_and_random

stimuli_sample_all_langs_and_random %>% 
  hclust() %>% 
  as.phylo()  %>% 
  plot(main = "clusterization with random equivalents and common stimuli",
       tip.color = colors$color[match(.$tip.label, colors$language)],
       direction = "downwards",
       cex = 1.5, 
       font = 2)
```

### neighbornet

```{r stimuli-sample-all-langs-and-random-nn}
stimuli_sample_all_langs_and_random  %>% 
  neighborNet() %>% 
  plot()
title(main = "Выборка стимулов со всеми 6 языками  (случайный эквивалент)")
```

:::


## Группировка по языкам

Перед тем, как приступить к перекодированию, которое предложила Маша К., посмотрим статистику конструкций по языкам:

```{r}
df %>% 
  count(language, construction_type) %>%
  group_by(construction_type) %>% 
  mutate(overall = sum(n)) %>%  
  pivot_wider(names_from = language, values_from = n, values_fill = 0) %>% 
  arrange(desc(overall)) %>% 
  select(construction_type, overall, Guro, Dan_Gweetaa, Mano, Kpelle, Kono, Looma)
```

Маша предложила классификацию, которую я попробую воспроизвести.

>
1) простая переходная вида X Aux Y V  (только этот случай)
2) простая непереходная X Aux V Y Ad, X Aux V loc, X+Y Aux V, Y Aux V X Ad (по идее исчерпывающий список, а что я забыла?)
3) конструкция с копулой - можно взять автоматически все случаи, где в формуле есть копула be: Y be X Ad, X be Y Ad, X be adj Y Ad, N be Xgen Y Ad, X+Y be N Ad и т.д.
4) некопульная конструкция со сложным глаголом - взять автоматически все случаи, где в формуле выполняется два условия: есть Aux (=нет be) и есть хотя бы одно N (вместе переходные, и непереходные) - X Aux N V Y Ad; X Aux Y N V; Xgen N Aux V Y Ad и т.д.

>По идее это не исчерпывающий список, останется что-то на периферии вроде X+Y Aux V X+Ypron recp Ad, но это редкие штуки. 

```{r}
df %>% 
  count(language, construction_type) %>%
  mutate(type = case_when(construction_type == "X Aux Y V" ~ "transitive",
                          str_detect(construction_type, "Aux") &
                            !str_detect(construction_type, "N") ~ "intransitive",
                          str_detect(construction_type, "be") ~ "copula",
                          str_detect(construction_type, "Aux") &
                            str_detect(construction_type, "N") ~ "complex verb",
                          TRUE ~ "other")) %>% 
  group_by(construction_type) %>% 
  mutate(overall = sum(n)) %>%  
  pivot_wider(names_from = language, values_from = n, values_fill = 0) %>% 
  arrange(desc(overall)) %>% 
  select(construction_type, type, 	overall, Guro, Dan_Gweetaa, Mano, Kpelle, Kono, Looma)
```

Вот, что получилось. Маш, что исправить? Вот саммари:

```{r}
df %>% 
  mutate(type = case_when(construction_type == "X Aux Y V" ~ "transitive",
                          str_detect(construction_type, "Aux") &
                            !str_detect(construction_type, "N") ~ "intransitive",
                          str_detect(construction_type, "be") ~ "copula",
                          str_detect(construction_type, "Aux") &
                            str_detect(construction_type, "N") ~ "complex verb",
                          TRUE ~ "other")) %>% 
  count(type, language) %>% 
  pivot_wider(names_from = language, values_from = n, values_fill = 0)  %>% 
  arrange(-Looma) %>% 
  select(type, Guro, Dan_Gweetaa, Mano, Kpelle, Kono, Looma)
```

> Во-вторых, есть отдельная просьба про распределение конструкций и глаголов. В первом листе stimuli_general в столбце B есть семантическая разметка глаголов. Добавь её, пожалуйста, в глагольную таблицу, которую ты будешь снова генерировать. 
А дальше я бы попросила сделать следующее. Посчитать для каждого глагола, сколько ему в наших языках соответствует разных конструкций из 4 типов, выделенных выше. А потом слить глаголы из одной семантической группы и посчитать для семантических групп вместе статистику по конструкциям. 
Грубо говоря я хочу проверить, верно ли, что у глаголов вида effect будет больше переходных конструкций, а у feeling больше сложных глаголов, т.к. более абстрактные значения языки склонны выражать метафорически.

```{r}
df %>% 
  left_join(stimuli) %>% 
    mutate(type = case_when(construction_type == "X Aux Y V" ~ "transitive",
                          str_detect(construction_type, "Aux") &
                            !str_detect(construction_type, "N") ~ "intransitive",
                          str_detect(construction_type, "be") ~ "copula",
                          str_detect(construction_type, "Aux") &
                            str_detect(construction_type, "N") ~ "complex verb",
                          TRUE ~ "other")) %>% 
  count(type, language, semantic_type) %>% 
  mutate(language = str_replace(language, "_", " "),
         language = factor(language, levels = c("Guro", "Dan Gweetaa", "Mano", "Kpelle", "Kono", "Looma"))) %>% 
  ggplot(aes(n, type))+
  geom_col()+
  facet_grid(semantic_type~language, scales = "free")
```

Ну вот примерно, то, что ты имела в виду, наверное, но это все нужно пересчитать, после того, как мы утвердим тип каждой из конструкции.


## Адлоги

Какие адлоги есть для каждого языка?

```{r}
df %>%
  mutate(adposition = str_split(adposition, ", ")) %>% 
  unnest_longer(adposition) %>% 
  count(language, adposition) %>% 
  na.omit()
```

Какие были раньше проблемы:

- в коно нет адлогов
- в дан гвета есть адлоги dhi̋ɤ и dhiɤ̋, bhȁ и bhàa, которые, наверное, про одно и то же. Кроме того есть адлог loc.
- в гуро есть адлоги léè и leè, lɛ̄ и lɛ, ɓa̰ и ɓā̰. Кроме того есть адлог loc.
- в лома есть адлоги mà и mà̀ (с двумя знаками тона). Кроме того есть адлог loc.
- в мано есть адлоги píé и píé (я не понимаю в чем разница...).

Проблемы на 15.02.2023:

- В гуро ɓa̰ и ɓā̰ --- разное?
- В гуро ya̰ и yā̰ --- разное?

Я не совсем понял, что написала МХ, так что я пока посчитал вот такое вот. Какие адлоги из разных языков встречаются друг с другом в одной расширеной конструкции внутри одного стимула?

```{r}
df %>% 
  filter(!str_detect(construction, "no equivalent"),
         !is.na(construction_type),
         !is.na(adposition)) %>%  
  group_by(number) %>% 
  mutate(adposition = str_c(language, "__", adposition)) %>% 
  pairwise_count(adposition, construction_type)  %>%
  group_by(item1, item2) %>% 
  summarise(n = sum(n)) %>% 
  arrange(desc(n))
```

Я попробовал сделать таблицу, но она получается огромная... Возьмем только примеры, где больше одного:

```{r}
df %>% 
  filter(!str_detect(construction, "no equivalent"),
         !is.na(construction_type),
         !is.na(adposition)) %>%  
  group_by(number) %>% 
  mutate(adposition = str_c(language, "__", adposition)) %>% 
  pairwise_count(adposition, construction_type) %>% 
  group_by(item1, item2) %>% 
  summarise(n = sum(n)) %>% 
  filter(n > 1) %>% 
  mutate(item1 = fct_reorder(item1, n, .desc = TRUE),
         item2 = fct_reorder(item2, n, .desc = TRUE)) %>% 
  ggplot(aes(item1, item2))+
  geom_tile(aes(fill = n), colour = "white") +
  geom_text(aes(label = n), colour = "white") +
  scale_fill_gradient(low = "tomato", high = "darkred")+
  coord_fixed()+
  labs(x = "", y = "") +
  theme(legend.position = "bottom",
        axis.text.x = element_text(angle = 90, vjust = 0, hjust=1))
```

Вот так я понял Машину идеи про то, как посмотреть соответствия между языками, берите лупу: 

```{r}
#| fig-height: 15
df %>% 
  filter(!str_detect(construction, "no equivalent"),
         !is.na(construction_type),
         !is.na(adposition)) %>%  
  group_by(number) %>% 
  mutate(adposition = str_c(language, "__", adposition)) %>% 
  pairwise_count(adposition, construction_type) %>% 
  group_by(item1, item2) %>% 
  summarise(n = sum(n)) %>% 
  filter(n > 1) %>% 
  separate(item1, into = c("language1", "adposition1"), sep = "__") %>% 
  separate(item2, into = c("language2", "adposition2"), sep = "__") %>% 
  group_by(language1, language2, adposition1) %>% 
  summarize(ratio = n/sum(n),
            n = n,
            adposition2 = adposition2) %>% 
  distinct() %>% 
  mutate(language1 = str_replace(language1, "_", " "),
         language1 = factor(language1, levels = c("Guro", "Dan Gweetaa", "Mano", "Kpelle", "Kono", "Looma")),
         language2 = str_replace(language2, "_", " "),
         language2 = factor(language2, levels = c("Guro", "Dan Gweetaa", "Mano", "Kpelle", "Kono", "Looma"))) %>% 
  ggplot(aes(ratio, adposition1, label = str_c(adposition2, "\n",
                                               round(ratio*100), "% (",
                                               n, ")")))+
  geom_col(color = "white")+
  geom_label(position = position_stack(vjust = .5), size = 2)+
  facet_grid(language1~language2, scales = "free")+
  labs(y = "")
```


## Preprocessing

```{r}
#| eval=FALSE

library(tidyverse)
mano_kpelle_pre <- readxl::read_xlsx("../say_stimuli.xlsx", sheet = "mano + kpelle")

mano_kpelle_pre %>% 
  rename(number = Number,
         construction = `Mano construction`,
         construction_type = `Mano extended construction type`,
         adposition = `Mano Postposition`,
         verb = `Mano verb`,
         verb_meaning = `Mano Complex verb meaning`) %>% 
  mutate(language = "Mano") %>% 
  select(number, construction, construction_type, adposition, verb, verb_meaning, language) %>% 
  filter(!is.na(construction)) ->
  mano

mano_kpelle_pre %>% 
  rename(number = Number,
         construction = `Kpelle construction`,
         construction_type = `Kpelle extended construction type`,
         adposition = `Kpelle postposition`,
         verb = `Kpelle verb`,
         verb_meaning = `Kpelle complex verb meaning`) %>% 
  mutate(language = "Kpelle") %>% 
  select(number, construction, construction_type, adposition, verb, verb_meaning, language) %>% 
  filter(!is.na(construction)) ->
  kpelle

rm(mano_kpelle_pre)

kono_pre <- readxl::read_xlsx("../say_stimuli.xlsx", sheet = "kono")

kono_pre %>% 
  rename(number = Number,
         construction = `Kono construction...8`,
         construction_type = `Kono extended construction`,
         adposition = `Kono adposition`) %>% 
  mutate(language = "Kono",
         verb = "",
         verb_meaning = "") %>% 
  select(number, construction, construction_type, adposition, verb, verb_meaning, language) %>% 
  filter(!is.na(construction)) ->
  kono

rm(kono_pre)

# I renamed one of the columns to "Looma extended construction"
looma_pre <- readxl::read_xlsx("../say_stimuli.xlsx", sheet = "Looma")

looma_pre %>% 
  rename(number = Number,
         construction = `Looma construction`,
         construction_type = `Looma extended construction`,
         adposition = `Looma Postposition`,
         verb = `Looma Verb`,
         verb_meaning = `Looma Complex Verb`) %>% 
  mutate(language = "Looma") %>% 
  select(number, construction, construction_type, adposition, verb, verb_meaning, language) %>% 
  filter(!is.na(construction)) ->
  looma

rm(looma_pre)

# I renamed one of the columns to "Guro extended construction"
guro_pre <- readxl::read_xlsx("../say_stimuli.xlsx", sheet = "Guro")

guro_pre %>% 
  rename(number = Number,
         construction = `Guro construction`,
         construction_type = `Guro extended construction`,
         adposition = `Guro Postposition`,
         verb = `Guro Verb`,
         verb_meaning = `Guro Complex Verb`) %>% 
  mutate(language = "Guro") %>% 
  select(number, construction, construction_type, adposition, verb, verb_meaning, language) %>% 
  filter(!is.na(construction)) ->
  guro

rm(guro_pre)

dan_pre <- readxl::read_xlsx("../say_stimuli.xlsx", sheet = "Dan Gweetaa from Vydrin")

dan_pre %>% 
  rename(number = Number,
         construction = `Dan construction`,
         construction_type = `Dan extended construction type`,
         adposition = `Dan Postposition`,
         verb = `Dan Verb`, 
         verb_meaning = `Dan complex verb meaning`) %>% 
  mutate(language = "Dan_Gweetaa") %>% 
  select(number, construction, construction_type, adposition, verb, verb_meaning, language) %>% 
  filter(!is.na(construction)) ->
  dan

rm(dan_pre)

guro %>% 
  bind_rows(kono, kpelle, looma, mano, dan) %>%
  write_csv("../GM_merged.csv", na = "")


readxl::read_xlsx("../say_stimuli.xlsx", sheet = "stimuli_general") %>% 
  select(Number, `English predicate`, `Stimulus sentence (SAY)`, `Semantic types`) %>% 
  rename(number = Number,
         predicate_eng = `English predicate`,
         stimuli = `Stimulus sentence (SAY)`,
         semantic_type = `Semantic types`) ->
  stimuli

read_csv("../GM_merged.csv") %>% 
  filter(!str_detect(construction, "no equivalent"),
         !is.na(construction_type)) %>%
  group_by(number) %>% 
  add_count(construction_type) %>% 
  arrange(number, desc(n)) %>% 
  select(-adposition) %>% 
  group_by(number, construction_type, language, n) %>% 
  summarise(construction = str_c(construction, collapse = "; ")) %>% 
  pivot_wider(names_from = language, values_from = construction, values_fill = "") %>% 
  group_by(number) %>% 
  mutate(id = 1:n()) %>%
  ungroup() %>% 
  left_join(stimuli) %>% 
  select(number, semantic_type, predicate_eng, stimuli, id, n, construction_type, Guro, Looma, Mano, Dan_Gweetaa, Kono, Kpelle) %>% 
  writexl::write_xlsx("../GM_merged_wide.xlsx")

read_csv("../GM_merged.csv") %>% 
  filter(!str_detect(construction, "no equivalent"),
         !is.na(construction_type)) %>%
  select(-construction) %>%
  distinct(number, construction_type, language, adposition) %>% 
  group_by(number, construction_type, language) %>% 
  summarise(adposition = str_c(adposition, collapse = "; ")) %>% 
  pivot_wider(names_from = language, values_from = adposition, values_fill = "") %>% 
  group_by(number) %>% 
  mutate(id = 1:n()) %>%
  ungroup() %>% 
  left_join(stimuli) %>% 
  select(number, semantic_type, predicate_eng, stimuli, id, construction_type, Guro, Looma, Mano, Dan_Gweetaa, Kono, Kpelle) %>% 
  writexl::write_xlsx("../GM_merged_wide_adpositions.xlsx")

read_csv("../GM_merged.csv") %>% 
  filter(!str_detect(construction, "no equivalent"),
         !is.na(construction_type)) %>%
  select(-construction) %>%
  distinct(number, construction_type, language, verb) %>% 
  group_by(number, construction_type, language) %>% 
  summarise(verb = str_c(verb, collapse = "; ")) %>% 
  pivot_wider(names_from = language, values_from = verb, values_fill = "") %>% 
  group_by(number) %>% 
  mutate(id = 1:n()) %>%
  ungroup() %>% 
  left_join(stimuli) %>% 
  select(number, predicate_eng, stimuli, id, construction_type, Guro, Looma, Mano, Dan_Gweetaa, Kpelle) %>% 
  writexl::write_xlsx("../GM_merged_wide_verb.xlsx")

read_csv("../GM_merged.csv") %>%
  filter(!str_detect(construction, "no equivalent"),
         !is.na(construction_type),
         !is.na(verb_meaning)) %>%
  select(-construction) %>%
  distinct(number, construction_type, language, verb, verb_meaning) %>% 
  mutate(verb_meaning = str_c(verb_meaning, " (", verb, ")")) %>% 
  group_by(number, construction_type, language) %>%
  summarise(verb_meaning = str_c(verb_meaning, collapse = "; ")) %>%
  pivot_wider(names_from = language, values_from = verb_meaning, values_fill = "") %>%
  group_by(number) %>%
  mutate(id = 1:n()) %>%
  ungroup() %>%
  left_join(stimuli) %>%
  select(number, predicate_eng, stimuli, id, construction_type, Guro, Looma, Mano, Dan_Gweetaa, Kpelle) %>%
  writexl::write_xlsx("../GM_merged_wide_verb_meaning.xlsx")
```

:::